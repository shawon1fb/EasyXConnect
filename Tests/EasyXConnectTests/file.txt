import XCTest
@testable import YourModuleName

final class FormDataTests: XCTestCase {

    func testFormDataFields() throws {
        // Arrange
        let testMap: [String: AnyEncodable?] = [
            "field1": AnyEncodable("value1"),
            "field2": AnyEncodable(123),
            "field3": AnyEncodable([1, 2, 3])
        ]
        
        let boundary = FormData.generateBoundary()
        let formData = FormData(map: testMap, boundary: boundary)
        
        // Act
        let formDataBytes = formData.toBytes()
        
        // Assert
        XCTAssertNotNil(formDataBytes, "Form data should not be nil")
        
        let formDataString = String(data: formDataBytes!, encoding: .utf8)
        XCTAssertTrue(formDataString?.contains("name=\"field1\"") ?? false, "Form data should contain field1")
        XCTAssertTrue(formDataString?.contains("value1") ?? false, "Form data should contain value1")
        XCTAssertTrue(formDataString?.contains("name=\"field2\"") ?? false, "Form data should contain field2")
        XCTAssertTrue(formDataString?.contains("123") ?? false, "Form data should contain value for field2")
    }

    func testFormDataFiles() throws {
        // Arrange
        let testFileUrl = URL(fileURLWithPath: "/path/to/your/file.txt")
        let testMap: [String: AnyEncodable?] = [
            "fileField": AnyEncodable(testFileUrl)
        ]
        
        let boundary = FormData.generateBoundary()
        let formData = FormData(map: testMap, boundary: boundary)
        
        // Act
        let formDataBytes = formData.toBytes()
        
        // Assert
        XCTAssertNotNil(formDataBytes, "Form data should not be nil")
        
        let formDataString = String(data: formDataBytes!, encoding: .utf8)
        XCTAssertTrue(formDataString?.contains("name=\"fileField\"") ?? false, "Form data should contain fileField")
        XCTAssertTrue(formDataString?.contains("filename=\"file.txt\"") ?? false, "Form data should contain the file name")
        XCTAssertTrue(formDataString?.contains("Content-Type: application/octet-stream") ?? false, "Form data should contain content type for the file")
    }
    
    func testGenerateBoundary() throws {
        // Arrange & Act
        let boundary = FormData.generateBoundary()
        
        // Assert
        XCTAssertFalse(boundary.isEmpty, "Generated boundary should not be empty")
        XCTAssertTrue(boundary.starts(with: "----WebKitFormBoundary"), "Boundary should start with the correct prefix")
    }
    
    // Additional tests can be added for edge cases, like empty maps, invalid URLs, etc.
}

// Helper struct for encoding values
public struct AnyEncodable: Encodable {
    public let value: Any

    public init(_ value: Any) {
        self.value = value
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()

        switch value {
        case let intValue as Int:
            try container.encode(intValue)
        case let stringValue as String:
            try container.encode(stringValue)
        case let arrayValue as [Any]:
            try container.encode(arrayValue.map { AnyEncodable($0) })
        default:
            let context = EncodingError.Context(codingPath: container.codingPath, debugDescription: "Unsupported type")
            throw EncodingError.invalidValue(value, context)
        }
    }
}

